#!/bin/bash

set -o pipefail

function usage {

    echo ""
	echo "Runs dicom tarball(s) to BIDS conversion using heudiconv"
	echo "Usage $0  <optional flags>   <in tar file(s)>"
	echo ""
    echo " Assumes tar files are generated by cfmm2tar or dicom2tar (to find PatientName)"
    echo " If this is not the case, please use the -T option. "
    echo ""
	echo " Optional flags (must appear before required arguments):"
	echo "	-P <patient name search string> :  default:  $patientname_search "
	echo "	-T <tar name search string> :  uses tarfile name instead of PatientName to search, e.g. '{subject}' if <subject>.tar" 
	echo "	-o <output_dir> : default=$output_dir"
	echo "	-N <num parallel cores> : default=0  (max cores)"
	echo "	-h <heuristic.py> : default=$heuristic"
	echo "	-w <tempdir>  (--tempdir in heudiconv)" 
	echo "	-O \"<additional heudiconv options>\" : default=$heudi_opts"
	echo "	-C : copy tarfiles to BIDS sourcedata folder" 
	echo "	-D : enable defacing of T1w images : default will not deface"
	echo ""
	echo " Available heuristic files:"
	for h in `ls ${heuristic_dir}/*.py`
	do
		echo "	${h##*/}"
	done
	exit 1
}

execpath=`dirname $0`
execpath=`realpath $execpath`

heuristic_dir=$execpath/heuristics
output_dir=./bids
heuristic=cfmm_base.py
heudi_opts=
patientname_search='*_{subject}'
tarfile_search=
ncores=0
tempdir=
copytar=0
do_deface=0

# doing heuristic-free conversion is now the default, 
# since access to the corresponding dicoms is needed for bruker tune-up
do_dcm2niix=1

while getopts "N:o:h:O:P:T:w:CD" options; do
 case $options in
    N ) echo "  Overriding number of cores: $OPTARG" >&2
	ncores=$OPTARG;;
    D ) echo "  Enabling deface of T1w images" >&2
	do_deface=1;;
    o ) echo "	Overriding output dir as: $OPTARG" >&2
	output_dir=`realpath $OPTARG`;;
    h ) echo "	Overriding heuristic file as: $OPTARG" >&2
	heuristic=$OPTARG;;
    O ) echo "	Using heudiconv options: $OPTARG"  >&2
	heudi_opts="$OPTARG";;
    P ) echo "  Using custom PatientName search: $OPTARG" >&2
	patientname_search="$OPTARG";;
    T ) echo "  Using custom tarfile name search: $OPTARG" >&2
	tarfile_search="$OPTARG";;
    w ) echo "  Using --tempdir=$OPTARG" >&2
    tempdir=$OPTARG;;
    C ) echo "  Copying source tarfiles to sourcedata" >&2
    copytar=1;;

   * ) usage
	exit 1;;
 esac
done

shift $((OPTIND-1))

if [ -e $heuristic ]
then
 heuristic_file=`realpath $heuristic`
else
 heuristic_file=$heuristic_dir/$heuristic
 if [ ! -e $heuristic_file ]
 then
   echo $heuristic does not exist!
   exit 1 
 fi
fi

if [ "$#" -lt 1 ]
then
  usage;
  exit 1;
fi


output_dir=`realpath $output_dir`
code_dir=$output_dir/code
sourcedata=$output_dir/sourcedata
mkdir -p $code_dir $sourcedata

datestring=`date +%Y-%m-%d_%Hh%Mm_$RANDOM`
log_dir=$code_dir/tar2bids_$datestring
if [ -e $log_dir ]
then 
 log_dir=${log_dir}_`date +%M`
fi

mkdir -p $log_dir

subjlist=$log_dir/subjects-list.txt
validator_out=$log_dir/bids-validator.txt
heudiconv_out=$log_dir/heudiconv
mkdir $log_dir/logs
heudi_log=$log_dir/logs/heudiconv
tuneup_log=$log_dir/logs/tuneup
heudiconv_subjlist=$log_dir/subj_args.txt
heudiconv_subjlist_all=$log_dir/subj_args.all.txt
heudiconv_sesslist=$log_dir/sess_args.txt
heudiconv_sesslist_all=$log_dir/sess_args.all.txt
dicomexpr_list=$log_dir/dicomexpr.txt

heudi_opts="$heudi_opts --overwrite"


# parse tarfile names to get subjids
for tar in $@
do

    if [ ! -e $tar ]
    then
        echo "  ERROR in $0: tar file $tar does not exist!"
        exit 1
    fi

    if [ "$copytar" = "1" ]
    then
        cp -v $tar $sourcedata
    fi

	filename=${tar##*/}

	folder=`realpath $(dirname $tar)`
	
	#do_dcm2niix 
	if [ "$do_dcm2niix" = 1 ] #this is always enabled now
	then

		if [ -n "$tempdir" ]
		then
			dcm_dir=$tempdir/temp_dicoms_$RANDOM
		else
			dcm_dir=/tmp/temp_dicoms_$RANDOM
		fi

		nii_dir=$sourcedata/dcm2niix/${filename%.tar*}

		mkdir -p $dcm_dir $nii_dir
		#extract tar file 
		tar -C $dcm_dir -xvf $tar 
		dcm2niix -o $nii_dir -d 10 $dcm_dir
	fi



	#default, search for subjid in PatientName
	if [ ! -n "$tarfile_search" ]
	then

	pi=`echo $filename | awk  -F '_' '{print $1}'`
	pi_study=${filename%%_[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]_*}
	study=${pi_study##${pi}_}
	date_etc=${filename##${pi}_${study}_}
	date=${date_etc%%_*}

	patient_etc=${date_etc##${date}_}
	patient=${patient_etc%_[0-9]*.*}

	suffix=${patient_etc##${patient}_}

	

	echo "  PI=$pi Study=$study Date=$date PatientName=$patient"
	search="${pi}_${study}_${date}_${patientname_search}_[0-9]*.*.t*"
	subjid=`$execpath/etc/getSubjSessID $patientname_search subject $patient`
	sessid=`$execpath/etc/getSubjSessID $patientname_search session $patient`
    
    #expression for heudiconv
#    dicom_expr=$folder/${pi}_${study}_????????_${patientname_search}_?.????????.t*
     dicom_expr=$folder/${pi}_${study}_${date}_${patientname_search}_${suffix}
    echo $dicom_expr >> $dicomexpr_list
	else
	#if -s specified, then search in tarfile
    search="${tarfile_search}.t*"
	subjid=`$execpath/etc/getSubjSessID $tarfile_search subject ${filename%.t*}`
	sessid=`$execpath/etc/getSubjSessID $tarfile_search session ${filename%.t*}`
    
    #expression for heudiconv
    dicom_expr=$folder/${tarfile_search}.t*
    echo $dicom_expr >> $dicomexpr_list

	fi
	
	if [ ! $? = 0 ]
	then
		echo    ERROR in $0: no matching subjid in tar: $tar
		echo $subjid
		exit 1
	fi

	if [ -n "$sessid" ]
	then
	echo "$filename -> sub-$subjid , ses-$sessid"
	else
	echo "$filename -> sub-$subjid"
	fi

	#compile subjid list
	if [ -n "$sessid" ]
	then
		echo "$subjid" >> $heudiconv_subjlist_all
		echo "$sessid" >> $heudiconv_sesslist_all
#	echo "-s $subjid -ss $sessid" >> $heudiconv_subjlist
	else
		echo "$subjid" >> $heudiconv_subjlist_all
	fi
	echo $subjid >> $subjlist


done

if [ ! -e $subjlist ]
then
 echo "no subjects found! exiting.."
 exit 1
fi

##sort and remove duplicate entries in subjlist
sort -u $heudiconv_subjlist_all -o $heudiconv_subjlist
if [ -e $heudiconv_sesslist_all ]
then
sort -u $heudiconv_sesslist_all -o $heudiconv_sesslist
fi
sort -u $subjlist -o $subjlist


#options for GNU parallel
popts="--no-notice --verbose --jobs $ncores -u"

if [ -n "$tempdir" ]
then
    export TMPDIR=$tempdir
fi

echo "  Running: heudiconv ... "


if [ -n "$sessid" ]
then


parallel --link -a $heudiconv_subjlist_all -a $heudiconv_sesslist_all -a $dicomexpr_list $popts  "heudiconv ${heudi_opts} -b -d {3} -o $output_dir -f $heuristic_file -s {1} -ss {2} | tee $heudi_log.{1}.{2} "

else

parallel --link -a $heudiconv_subjlist_all  -a $dicomexpr_list $popts  "heudiconv ${heudi_opts} -b -d {2} -o $output_dir -f $heuristic_file -s {1}  | tee $heudi_log.{1}"

fi



echo "  Moving hidden .heudiconv folder to $heudiconv_out"
mv $output_dir/.heudiconv $heudiconv_out


if [ -n "$sessid" ]
then
#check if certain files exist that need further corrections: (the following simply suppresses stderr: 1>/dev/null 2>&1)
Nfmaps=`ls $output_dir/sub-*/ses-*/fmap/*phasediff.nii.gz 2>/dev/null | wc -l`
Ngre=`ls $output_dir/sub-*/ses-*/anat/*GRE?.nii.gz 2>/dev/null | wc -l`
Nbold=`ls $output_dir/sub-*/ses-*/func/*bold?.nii.gz 2>/dev/null | wc -l`
Nmemp2rage=`ls $output_dir/sub-*/ses-*/anat/*MP2RAGE?.nii.gz 2>/dev/null | wc -l`
Nsa2rage_complex=`ls $output_dir/sub-*/ses-*/fmap/*SA2RAGE?.nii.gz 2>/dev/null | wc -l`
Nmp2rage=`ls $output_dir/sub-*/ses-*/anat/*MP2RAGE.nii.gz 2>/dev/null | wc -l`
else
#check if certain files exist that need further corrections: (the following simply suppresses stderr: 1>/dev/null 2>&1)
Nfmaps=`ls $output_dir/sub-*/fmap/*phasediff.nii.gz 2>/dev/null | wc -l`
Ngre=`ls $output_dir/sub-*/anat/*GRE?.nii.gz 2>/dev/null | wc -l`
Nbold=`ls $output_dir/sub-*/func/*bold?.nii.gz 2>/dev/null | wc -l`
Nmemp2rage=`ls $output_dir/sub-*/anat/*MP2RAGE?.nii.gz 2>/dev/null | wc -l`
Nsa2rage_complex=`ls $output_dir/sub-*/fmap/*SA2RAGE?.nii.gz 2>/dev/null | wc -l`
Nmp2rage=`ls $output_dir/sub-*/anat/*MP2RAGE.nii.gz 2>/dev/null | wc -l`
fi



if [ ! "$Nfmaps" = 0 ]
then
echo "  Running bids correction from phasediff fieldmap data..."

if [ -n "$sessid" ]
then
parallel -a $heudiconv_subjlist -a $heudiconv_sesslist $popts "$execpath/etc/correctFieldMap $output_dir {1} {2} | tee -a $tuneup_log.{1}.{2} " 
else
parallel -a $heudiconv_subjlist  $popts "$execpath/etc/correctFieldMap $output_dir {1} | tee -a $tuneup_log.{1}" 
fi

fi

if [ ! "$Ngre" = 0 -o ! "$Nmemp2rage" = 0 -o ! "$Nsa2rage_complex" = 0 ]
then
echo "  Running bids correction from multi-echo GRE and MP2RAGE fieldmap data..."

if [ -n "$sessid" ]
then

parallel -a $heudiconv_subjlist -a $heudiconv_sesslist $popts "$execpath/etc/correctMultiEcho $output_dir {1} {2} | tee -a $tuneup_log.{1}.{2}"
else
parallel -a $heudiconv_subjlist $popts "$execpath/etc/correctMultiEcho $output_dir {1} | tee -a $tuneup_log.{1}"
fi

fi

if [ ! "$Nbold" = 0 ]
then
echo "  Running bids correction from multi-echo EPI data..."

if [ -n "$sessid" ]
then

parallel -a $heudiconv_subjlist -a $heudiconv_sesslist $popts "$execpath/etc/correctMultiEchoEPI $output_dir {1} {2} | tee -a $tuneup_log.{1}.{2}"
else
parallel -a $heudiconv_subjlist $popts "$execpath/etc/correctMultiEchoEPI $output_dir {1} | tee -a $tuneup_log.{1}"
fi

fi

if [ ! "$Nmprage" = 0 ]
then

echo " Running script to compute UNI-DEN from UNI & inversions (if it doesn't exist already)"
if [ -n "$sessid" ]
then

parallel -a $heudiconv_subjlist -a $heudiconv_sesslist $popts "$execpath/etc/correctUniDen $output_dir {1} {2} | tee -a $tuneup_log.{1}.{2}"
else
parallel -a $heudiconv_subjlist $popts "$execpath/etc/correctUniDen $output_dir {1} | tee -a $tuneup_log.{1}"
fi




fi

if [ "$do_deface" = "1" ]
then

echo "  Defacing T1w images with pydeface... (if successful, will back-up non-defaced to sourcedata)"
if [ -n "$sessid" ]
then
parallel -a $heudiconv_subjlist -a $heudiconv_sesslist $popts "$execpath/etc/defaceImages $output_dir {1} {2} | tee -a $tuneup_log.{1}.{2}"
else
parallel -a $heudiconv_subjlist $popts "$execpath/etc/defaceImages $output_dir {1} | tee -a $tuneup_log.{1}"
fi

fi

echo "  Cleaning participants and other tsv files (sorting, removing extra columns)..."
$execpath/etc/cleanParticipantsFile $output_dir

echo "  Adding default .bidsignore file..."
cp -v $execpath/etc/bidsignore $output_dir/.bidsignore


echo "  Running bids-validator..."
bids-validator $output_dir | tee  $validator_out

#exit with return val of bids validator
exit $?
